rank(c(7,8,5,9,2))
library(Rcpp)
sourceCpp("sortC.cpp")
sourceCpp("sortC.cpp")
orderC(c(7,8,5,9,2))
sourceCpp("meanC.cpp")
sourceCpp("meanC.cpp")
meanC(a)
a<-c(7,8,5,9,2)
meanC(a)
sourceCpp("sortC.cpp")
sourceCpp("sortC.cpp")
orderC(a)
sortC(a)
sourceCpp("sortC.cpp")
orderC(a)
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
r=runif(1000)
microbenchmark(orderC(x),order(x))
microbenchmark(orderC(r),order(4))
cppFunction('NumericVector sort1129(NumericVector v){
NumericVector idx(v.size());
itoa(idx.begin(),idx.end(),0);
std::sort(idx.begin(),idx.end(),
[&v](size_t i1,size_t i2){return v[i1]<v[i2];});
return idx;
}')
cbindCpp <- 'NumericMatrix cbindC(NumericMatrix mf, NumericMatrix Y) {
int acoln = mf.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + 2);
for (int j = 0; j < acoln + 2; j++) {
if (j < 2) {
out(_, j) = Y(_, 1-j);
} else {
out(_, j) = b(_, j - 2);
}
}
return out;
}'
cppFunction(cbindCpp)
cbindCpp <- 'NumericMatrix cbindC(NumericMatrix mf, NumericMatrix Y) {
int acoln = mf.ncol();
NumericMatrix out = no_init_matrix(Y.nrow(), acoln + 2);
for (int j = 0; j < acoln + 2; j++) {
if (j < 2) {
out(_, j) = Y(_, 1-j);
} else {
out(_, j) = b(_, j - 2);
}
}
return out;
}'
cppFunction(cbindCpp)
cbindCpp <- 'NumericMatrix cbindC(NumericMatrix mf, NumericMatrix Y) {
int acoln = mf.ncol();
NumericMatrix out = no_init_matrix(Y.nrow(), acoln + 2);
for (int j = 0; j < acoln + 2; j++) {
if (j < 2) {
out(_, j) = Y(_, 1-j);
} else {
out(_, j) = mf(_, j - 2);
}
}
return out;
}'
cppFunction(cbindCpp)
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
a
set.seed(42)
a <- matrix(rnorm(50), 25)
b <- matrix(runif(100), 25)
a
b
cbind(a,b)
cbindC(b,a)
microbenchmark(cbind(a,b),cbindC(a,b))
a <- matrix(rnorm(50000), 25000)
b <- matrix(runif(100000), 25000)
cbind(a,b)
cbindC(b,a)
library(microbenchmark)
microbenchmark(cbind(a,b),cbindC(a,b))
a <- matrix(rnorm(500000), 250000)
b <- matrix(runif(1000000), 250000)
#cbind(a,b)
#cbindC(b,a)
library(microbenchmark)
microbenchmark(cbind(a,b),cbindC(a,b))
a <- matrix(rnorm(2186), 1093)
b <- matrix(runif(66673), 1093)
#cbind(a,b)
#cbindC(b,a)
library(microbenchmark)
microbenchmark(cbind(a,b),cbindC(a,b))
sourceCpp(orderC.cpp)
sourceCpp("orderC.cpp")
setwd("C:\Users\10636\Documents\GitHub\615final")
setwd("C:\Users\10636\Documents\GitHub\615final")
C:/1.1/bios615/project
setwd("C:/1.1/bios615/project")
setwd("C:/Users/10636/Documents/GitHub/615final")
sourceCpp("orderC.cpp")
sourceCpp("orderC.cpp")
r<-runif(1093)
microbenchmark(orderC(r),order(r))
dataCox <- function(n, lambda, rho, x, beta, cens.rate){
# real Weibull times
u <- runif(n)
Treal <- (- log(u) / (lambda * exp(x %*% beta)))^(1 / rho)
# censoring times
Censoring <- rexp(n, cens.rate)
# follow-up times and event indicators
time <- pmin(Treal, Censoring)
status <- as.numeric(Treal <= Censoring)
# data set
data.frame(id = 1:n, time = time, status = status, x = x)
}
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()                                  #保存调用函数时的输入
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)               #检查输入是否符合函数的要求
if (indx[1] == 0)
stop("A formula argument is required")
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())                      #eval判断输入是否合法，mf储存数据
Y <- model.extract(mf, "response")
#这一部分判断Y是否合法
if (!inherits(Y, "Surv"))
stop("Response must be a survival object")
type <- attr(Y, "type")
if (type != "right" && type != "counting")
stop(paste("Cox model doesn't support \"", type, "\" survival data",
sep = ""))
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
cbindC(mf,Y) -> data2return                        #mf的第一列应该是名称之类，之后是数据
colnames(data2return)[1:2]=c("event","times")
}
coxphSGDbatch <- function(formula, data, learning.rate, beta){
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
batchData <- coxphSGDprepare(formula = formula, data = data) # sorts times lol
# calculate the log-likelihood for this batch sample
########################################################################################
batchData <- batchData[order(-batchData$times), ] # dplyr::arrange(-times) / sorts time again but with different order
# scores occure in nominator and denominator
scores <- apply(batchData[, -c(1, 2)], 1,
function(element) exp(element %*% beta) )
nominator <- apply(batchData[, -c(1, 2)], 2,
function(element) cumsum(scores*element) )
denominator <- cumsum(scores)
# sum over non-censored observations
partial_sum <- (batchData[, -c(1, 2)] - nominator/denominator)*batchData[, "event"]
# each column indicates one explanatory variable
U_batch <- colSums(partial_sum)
return(beta + learning.rate * U_batch)
}
x <- matrix(sample(0:1, size = 20000, replace = TRUE), ncol = 2)
dataCox(10^4, lambda = 3, rho = 2, x, beta = c(1,3), cens.rate = 5) -> dCox
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox_split,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
library(survival)
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()                                  #保存调用函数时的输入
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)               #检查输入是否符合函数的要求
if (indx[1] == 0)
stop("A formula argument is required")
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())                      #eval判断输入是否合法，mf储存数据
Y <- model.extract(mf, "response")
#这一部分判断Y是否合法
if (!inherits(Y, "Surv"))
stop("Response must be a survival object")
type <- attr(Y, "type")
if (type != "right" && type != "counting")
stop(paste("Cox model doesn't support \"", type, "\" survival data",
sep = ""))
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
cbindC(mf[,-1],Y) -> data2return                        #mf的第一列应该是名称之类，之后是数据
colnames(data2return)[1:2]=c("event","times")
}
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())
#print(mf)
mfm<-as.matrix(mf[,-1])
print(mfm)
Y <- model.extract(mf, "response")
print(Y)
print(unclass(Y))
}
coxphSGDprepare(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox)
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())
#print(mf)
mfm<-as.matrix(mf[,-1])
print(mfm[1:5,])
Y <- model.extract(mf, "response")
#print(Y)
#print(unclass(Y))
}
coxphSGDprepare(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox)
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())
#print(mf)
mfm<-as.matrix(mf[,-1])
print(is.matrix(mf))
Y <- model.extract(mf, "response")
print(is.matrix(Y))
#print(Y)
#print(unclass(Y))
}
coxphSGDprepare(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox)
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()                                  #保存调用函数时的输入
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)               #检查输入是否符合函数的要求
if (indx[1] == 0)
stop("A formula argument is required")
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())                      #eval判断输入是否合法，mf储存数据
Y <- model.extract(mf, "response")
#这一部分判断Y是否合法
if (!inherits(Y, "Surv"))
stop("Response must be a survival object")
type <- attr(Y, "type")
if (type != "right" && type != "counting")
stop(paste("Cox model doesn't support \"", type, "\" survival data",
sep = ""))
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
cbindC(as.matrix(mf[,-1]),Y) -> data2return                        #mf的第一列应该是名称之类，之后是数据
colnames(data2return)[1:2]=c("event","times")
}
coxphSGDbatch <- function(formula, data, learning.rate, beta){
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
batchData <- coxphSGDprepare(formula = formula, data = data) # sorts times lol
# calculate the log-likelihood for this batch sample
########################################################################################
batchData <- batchData[order(-batchData$times), ] # dplyr::arrange(-times) / sorts time again but with different order
# scores occure in nominator and denominator
scores <- apply(batchData[, -c(1, 2)], 1,
function(element) exp(element %*% beta) )
nominator <- apply(batchData[, -c(1, 2)], 2,
function(element) cumsum(scores*element) )
denominator <- cumsum(scores)
# sum over non-censored observations
partial_sum <- (batchData[, -c(1, 2)] - nominator/denominator)*batchData[, "event"]
# each column indicates one explanatory variable
U_batch <- colSums(partial_sum)
return(beta + learning.rate * U_batch)
}
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
coxphSGDprepare <- function(formula, data) {
# Parameter identification as in  `survival::coxph()`.
Call <- match.call()                                  #保存调用函数时的输入
indx <- match(c("formula", "data"),
names(Call), nomatch = 0)               #检查输入是否符合函数的要求
if (indx[1] == 0)
stop("A formula argument is required")
temp <- Call[c(1, indx)]
temp[[1]] <- as.name("model.frame")
mf <- eval(temp, parent.frame())                      #eval判断输入是否合法，mf储存数据
Y <- model.extract(mf, "response")
#这一部分判断Y是否合法
if (!inherits(Y, "Surv"))
stop("Response must be a survival object")
type <- attr(Y, "type")
if (type != "right" && type != "counting")
stop(paste("Cox model doesn't support \"", type, "\" survival data",
sep = ""))
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
cbindC(as.matrix(mf[,-1]),Y) -> data2return                        #mf的第一列应该是名称之类，之后是数据
#colnames(data2return)[1:2]<-c("event","times")
}
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
coxphSGDbatch <- function(formula, data, learning.rate, beta){
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
batchData <- coxphSGDprepare(formula = formula, data = data) # sorts times lol
# calculate the log-likelihood for this batch sample
########################################################################################
batchData <- batchData[order(-batchData[,2]), ] # dplyr::arrange(-times) / sorts time again but with different order
# scores occure in nominator and denominator
scores <- apply(batchData[, -c(1, 2)], 1,
function(element) exp(element %*% beta) )
nominator <- apply(batchData[, -c(1, 2)], 2,
function(element) cumsum(scores*element) )
denominator <- cumsum(scores)
# sum over non-censored observations
partial_sum <- (batchData[, -c(1, 2)] - nominator/denominator)*batchData[, "event"]
# each column indicates one explanatory variable
U_batch <- colSums(partial_sum)
return(beta + learning.rate * U_batch)
}
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
coxphSGDbatch <- function(formula, data, learning.rate, beta){
# collect times, status, variables and reorder samples
# to make the algorithm more clear to read and track
batchData <- coxphSGDprepare(formula = formula, data = data) # sorts times lol
# calculate the log-likelihood for this batch sample
########################################################################################
batchData <- batchData[order(-batchData[,2]), ] # dplyr::arrange(-times) / sorts time again but with different order
# scores occure in nominator and denominator
scores <- apply(batchData[, -c(1, 2)], 1,
function(element) exp(element %*% beta) )
nominator <- apply(batchData[, -c(1, 2)], 2,
function(element) cumsum(scores*element) )
denominator <- cumsum(scores)
# sum over non-censored observations
partial_sum <- (batchData[, -c(1, 2)] - nominator/denominator)*batchData[,1]
# each column indicates one explanatory variable
U_batch <- colSums(partial_sum)
return(beta + learning.rate * U_batch)
}
coxphSGDbatch(formula     = Surv(time, status) ~ x.1+x.2,
data        = dCox,
learning.rate = function(x){1/(100*sqrt(x))},
beta   = c(0,0))
matMultCpp <-'NumericMatrix matMultC(NumericMatrix A, NumericMatrix B){
return A*B;
}'
cppFunction(matMultCpp)
cppFunction(matMultCpp,includes = RcppEigen)
cppFunction(matMultCpp,includes = 'RcppEigen')
install.packages("RcppEigen")
library('RcppEigen
')
library('RcppEigen')
cppFunction(matMultCpp,includes = RcppEigen)
help(package="RcppEigen")
?cppFunction
cppFunction(depends="RcppEigen",matMultCpp)
matMultCpp <-'NumericMatrix matMultC(NumericMatrix A, NumericMatrix B){
int i=A.nrow();int j=B.ncol();
NumericMatrix C(i,j);
return C;
}'
cppFunction(depends="RcppEigen",matMultCpp)
a <- matrix(rnorm(2186), 1093)
b <- matrix(runif(66673), 63)
a <- matrix(rnorm(2186), 1093)
b <- matrix(runif(66673), 61)
c<-matMultC(a,b)
View(c)
a <- matrix(rnorm(2186), 2)
b <- matrix(runif(66673), 1093)
c<-matMultC(a,b)
View(c)
a <- matrix(rnorm(2186), 2)
b <- matrix(runif(66673), 1093)+10
c<-matMultC(a,b)
matMultCpp <-'NumericMatrix matMultC(NumericMatrix A, NumericMatrix B){
int i=A.nrow();int j=B.ncol();
NumericMatrix C(i,j);
C=A*B;
return C;
}'
cppFunction(depends="RcppEigen",matMultCpp)
#include <Eigen/Dense>
#include <iostream>
using namespace Eigen;
using namespace std;
extern "C"{
MatrixXd matMultC(MatrixXd A, MatrixXd B)
{
MatrixXd C=A*B;
return C;
}
}
sourceCpp('matMultC.cpp')
?sourceCpp
sourceCpp('matMultC.cpp')
matMultC<-cxxfunction(signature(a="NumericMatrix",
b="NumericMatrix"),
plugin="RcppEigen",
body="
NumericMatrix aa(a);
NumericMatrix bb(b);
const Eigen::Map<Eigen::MatrixXd> am(as<Eigen::Map<Eigen::MatrixXd> >(aa));
const Eigen::Map<Eigen::MatrixXd> bm(as<Eigen::Map<Eigen::MatrixXd> >(aa));
Eigen::MatrixXd c=am*bm;
return(wrap(c));
")
??cxxfunction
library("Rcpp", lib.loc="~/R/win-library/3.5")
matMultC<-cxxfunction(signature(a="NumericMatrix",
b="NumericMatrix"),
plugin="RcppEigen",
body="
NumericMatrix aa(a);
NumericMatrix bb(b);
const Eigen::Map<Eigen::MatrixXd> am(as<Eigen::Map<Eigen::MatrixXd> >(aa));
const Eigen::Map<Eigen::MatrixXd> bm(as<Eigen::Map<Eigen::MatrixXd> >(aa));
Eigen::MatrixXd c=am*bm;
return(wrap(c));
")
install.packages("inline")
lirary("inline")
library("inline")
matMultC<-cxxfunction(signature(a="NumericMatrix",
b="NumericMatrix"),
plugin="RcppEigen",
body="
NumericMatrix aa(a);
NumericMatrix bb(b);
const Eigen::Map<Eigen::MatrixXd> am(as<Eigen::Map<Eigen::MatrixXd> >(aa));
const Eigen::Map<Eigen::MatrixXd> bm(as<Eigen::Map<Eigen::MatrixXd> >(aa));
Eigen::MatrixXd c=am*bm;
return(wrap(c));
")
a <- matrix(rnorm(2186), 2)
b <- matrix(runif(66673), 1093)+10
c<-matMultC(a,b)
microbenchmark(apply(a, 1,function(element) exp(element %*% b) ),matMultC(a,b))
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a))
a <- matrix(rnorm(63), 63)
b <- matrix(runif(68859), 63)+10
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a))
a <- matrix(rnorm(1093), 1093)
b <- matrix(runif(68859), 63)+10
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a))
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a),b%*%a)
identical(matMultC(M1,M2), M1 %*% M2)
M1 <- matrix(sample(1e3),ncol=50)
M2 <- matrix(sample(1e3),nrow=50)
identical(matMultC(M1,M2), M1 %*% M2)
matMultC<-cxxfunction(signature(a="NumericMatrix",
b="NumericMatrix"),
plugin="RcppEigen",
body="
NumericMatrix aa(a);
NumericMatrix bb(b);
const Eigen::Map<Eigen::MatrixXd> am(as<Eigen::Map<Eigen::MatrixXd> >(aa));
const Eigen::Map<Eigen::MatrixXd> bm(as<Eigen::Map<Eigen::MatrixXd> >(bb));
Eigen::MatrixXd c=am*bm;
return(wrap(c));
")
M1 <- matrix(sample(1e3),ncol=50)
M2 <- matrix(sample(1e3),nrow=50)
identical(matMultC(M1,M2), M1 %*% M2)
a <- matrix(rnorm(1093), 1093)
b <- matrix(runif(68859), 63)+10
c<-matMultC(a,b)
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a),b%*%a)
microbenchmark(
+   matMultC(M1,M2),
+   M1 %*% M2,
+   times=10000L)
identical(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a))
a <- matrix(rnorm(1093), 1093)
b <- matrix(runif(1093), 1)+10
d<-
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a),b%*%a)
microbenchmark(apply(b, 1,function(element) exp(element %*% a) ),matMultC(b,a),b%*%a)
